/**
 * This code is generated using [[https://www.scala-sbt.org/contraband/ sbt-contraband]].
 */

// DO NOT EDIT MANUALLY
package sbt.internal.bsp
/**
 * Compile Request
 * @param targets A sequence of build targets to compile
 * @param originId An optional unique identifier generated by the client to identify this request.
                   The server may include this id in triggered notifications or response.
 * @param arguments Optional arguments to the compilation process
 */
final class CompileParams private (
  val targets: Vector[sbt.internal.bsp.BuildTargetIdentifier],
  val originId: Option[String],
  val arguments: Vector[String]) extends Serializable {
  
  
  
  override def equals(o: Any): Boolean = this.eq(o.asInstanceOf[AnyRef]) || (o match {
    case x: CompileParams => (this.targets == x.targets) && (this.originId == x.originId) && (this.arguments == x.arguments)
    case _ => false
  })
  override def hashCode: Int = {
    37 * (37 * (37 * (37 * (17 + "sbt.internal.bsp.CompileParams".##) + targets.##) + originId.##) + arguments.##)
  }
  override def toString: String = {
    "CompileParams(" + targets + ", " + originId + ", " + arguments + ")"
  }
  private[this] def copy(targets: Vector[sbt.internal.bsp.BuildTargetIdentifier] = targets, originId: Option[String] = originId, arguments: Vector[String] = arguments): CompileParams = {
    new CompileParams(targets, originId, arguments)
  }
  def withTargets(targets: Vector[sbt.internal.bsp.BuildTargetIdentifier]): CompileParams = {
    copy(targets = targets)
  }
  def withOriginId(originId: Option[String]): CompileParams = {
    copy(originId = originId)
  }
  def withOriginId(originId: String): CompileParams = {
    copy(originId = Option(originId))
  }
  def withArguments(arguments: Vector[String]): CompileParams = {
    copy(arguments = arguments)
  }
}
object CompileParams {
  
  def apply(targets: Vector[sbt.internal.bsp.BuildTargetIdentifier], originId: Option[String], arguments: Vector[String]): CompileParams = new CompileParams(targets, originId, arguments)
  def apply(targets: Vector[sbt.internal.bsp.BuildTargetIdentifier], originId: String, arguments: Vector[String]): CompileParams = new CompileParams(targets, Option(originId), arguments)
}
