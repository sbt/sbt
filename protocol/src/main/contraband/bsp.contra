package sbt.internal.bsp
@target(Scala)
@codecPackage("sbt.internal.bsp.codec")
@fullCodec("JsonProtocol")

## Build target
type BuildTarget {
  ## The targetâ€™s unique identifier
  id: sbt.internal.bsp.BuildTargetIdentifier!

  ## A human readable name for this target.
  ## May be presented in the user interface.
  ## Should be unique if possible.
  ## The id.uri is used if None.
  displayName: String

  ## The directory where this target belongs to. Multiple build targets are allowed to map
  ## to the same base directory, and a build target is not required to have a base directory.
  ## A base directory does not determine the sources of a target, see buildTarget/sources.
  baseDirectory: java.net.URI

  ## Free-form string tags to categorize or label this build target.
  ## For example, can be used by the client to:
  ## - customize how the target should be translated into the client's project model.
  ## - group together different but related targets in the user interface.
  ## - display icons or colors in the user interface.
  ## Pre-defined tags are listed in `BuildTargetTag` but clients and servers
  ## are free to define new tags for custom purposes.
  tags: [String]

  # The capabilities of this build target.
  # capabilities: BuildTargetCapabilities

  ## The set of languages that this target contains.
  ## The ID string for each language is defined in the LSP.
  languageIds: [String]

  # The direct upstream build target dependencies of this build target
  dependencies: [sbt.internal.bsp.BuildTargetIdentifier]

  ## Kind of data to expect in the `data` field. If this field is not set, the kind of data is not specified.
  dataKind: String

  ## Language-specific metadata about this target.
  ## See ScalaBuildTarget as an example.
  data: sjsonnew.shaded.scalajson.ast.unsafe.JValue
}

## Build Target Identifier
type BuildTargetIdentifier {
  ## The target's Uri
  uri: java.net.URI!
}

## Initialize Build Request
type InitializeBuildParams {
  ## Name of the client
  displayName: String!

  ## The version of the client
  version: String!

  ## The BSP version that the client speaks
  bspVersion: String!

  ## The rootUri of the workspace
  rootUri: java.net.URI!

  ## The capabilities of the client
  capabilities: sbt.internal.bsp.BuildClientCapabilities!

  # Additional metadata about the client
  # data: any
}

type BuildClientCapabilities {
  ## The languages that this client supports.
  ## The ID strings for each language is defined in the LSP.
  ## The server must never respond with build targets for other
  ## languages than those that appear in this list.
  languageIds: [String]
}

type InitializeBuildResult {
  ## Name of the server
  displayName: String!

  ## The version of the server
  version: String!

  ## The BSP version that the server speaks
  bspVersion: String!

  ## The capabilities of the build server
  capabilities: sbt.internal.bsp.BuildClientCapabilities!

  ## Additional metadata about the server
  data: sjsonnew.shaded.scalajson.ast.unsafe.JValue
}

## Workspace Build Targets response
type WorkspaceBuildTargetsResult {
  ## The build targets in this workspace that
  ## contain sources with the given language ids.
  targets: [sbt.internal.bsp.BuildTarget]
}

## Build Target Sources Request
type SourcesParams {
  targets: [sbt.internal.bsp.BuildTargetIdentifier]
}

## Build Target Sources response
type SourcesResult {
  items: [sbt.internal.bsp.SourcesItem]
}

type SourcesItem {
  target: sbt.internal.bsp.BuildTargetIdentifier!
  ## The text documents or and directories that belong to this build target.
  sources: [sbt.internal.bsp.SourceItem]
}

type SourceItem {
  ## Either a text document or a directory. A directory entry must end with a forward
  ## slash "/" and a directory entry implies that every nested text document within the
  ## directory belongs to this source item.
  ##
  uri: java.net.URI!

  ## Type of file of the source item, such as whether it is file or directory.
  kind: Int!

  ## Indicates if this source is automatically generated by the build and is not
  ## intended to be manually edited by the user.
  generated: Boolean!
}

# Scala Extension

## Contains scala-specific metadata for compiling a target containing Scala sources.
## This metadata is embedded in the data: Option[Json] field of the BuildTarget definition,
## when the dataKind field contains "scala".
type ScalaBuildTarget {
  ## The Scala organization that is used for a target.
  scalaOrganization: String!

  ## The scala version to compile this target
  scalaVersion: String!

  ## The binary version of scalaVersion.
  ## For example, 2.12 if scalaVersion is 2.12.4.
  scalaBinaryVersion: String!

  ## The target platform for this target
  platform: Int!

  ## A sequence of Scala jars such as scala-library, scala-compiler and scala-reflect.
  jars: [String]!
}

# sbt Extension

## Contains sbt-specific metadata for providing editor support for sbt build files.
## This metadata is embedded in the data: Option[Json] field of the BuildTarget definition
## when the dataKind field contains "sbt".
type SbtBuildTarget {
  ## The sbt version. Useful to support version-dependent syntax.
  sbtVersion: String!

  ## A sequence of Scala imports that are automatically imported in the sbt build files.
  autoImports: [String]!

  ## The Scala build target describing the scala
  ## version and scala jars used by this sbt version.
  scalaBuildTarget: sbt.internal.bsp.ScalaBuildTarget!

  ## An optional parent if the target has an sbt meta project.
  parent: sbt.internal.bsp.BuildTargetIdentifier

  ## The inverse of parent, list of targets that have this build target
  ## defined as their parent. It can contain normal project targets or
  ## sbt build targets if this target represents an sbt meta-meta build.
  children: [sbt.internal.bsp.BuildTargetIdentifier]!
}
